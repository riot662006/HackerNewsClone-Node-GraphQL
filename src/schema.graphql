type Query {
  info: String!

  feed(
    filter: String
    skip: Int
    take: Int
    orderBy: LinkOrderByInput
  ): [Link!]!

  me: User
}

type Mutation {
  sayHello(message: String): String!

  post(url: String!, description: String!): Link!
  updateLink(id: ID!, url: String, description: String): Link
  deleteLink(id: ID!): Link

  vote(linkId: ID!): Vote
  deleteVote(linkId: ID!): Vote

  signIn(email: String!, password: String!): AuthPayload
  signUp(email: String!, password: String!, name: String!): AuthPayload
}

type Subscription {
  hello: String!

  newLink: Link
}

input LinkOrderByInput {
  description: Sort
  url: Sort
  createdAt: Sort
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  name: String!
  email: String!
  links: [Link!]!
  votes: [Vote!]!
}

type Link {
  id: ID!
  createdAt: String!
  description: String!
  url: String!
  postedBy: User
  votes: [Vote!]!
}

type Vote {
  id: ID!
  link: Link
  user: User
}

enum Sort {
  asc
  desc
}
